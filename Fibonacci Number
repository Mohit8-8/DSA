#memoisation/ top down approach/recursive approach
# class Solution:
#     def helper(self,n:int, dp: list )-> int:
#         if n<=1:
#             return n
#         if dp[n]!=-1:
#             return dp[n]
#         dp[n] = self.helper(n-1,dp) + self.helper(n-2,dp)
#         return dp[n]

#     def fib(self, n: int) -> int:
#         dp = [-1]*(n+1)
#         return self.helper(n,dp)

#iterative approach / tabulation / bottum up
# class Solution:
#     def fib(self,n:int )-> int:
#         dp=[0]*(n+2)
#         dp[1]=1
#         for i in range(2,n+1):
#             dp[i]=dp[i-1]+ dp[i-2]
#         return dp[n]

#space optimization part of tabulation
class Solution:
    def fib(self,n:int )-> int:
        last=0
        slast=1

        if n<=1:
            return n

        for i in range(2,n+1):
            temp = slast
            slast = last+slast
            last = temp
        return slast
